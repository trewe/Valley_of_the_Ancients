#textdomain wesnoth-Valley_of_the_Ancients

[lua]
    code=<<

	local helper = wesnoth.require "lua/helper.lua"
	local wml_actions = wesnoth.wml_actions

	local function flash_screen(red,green,blue)
		-- usage: call this function by specifying the maximum values for each color. Don't go above 100.
		wml_actions.color_adjust { red = mathx.round(red * 0.67), green = mathx.round(green * 0.67), blue = mathx.round(blue * 0.67) }
		wml_actions.color_adjust { red = red, green = green, blue = blue }
		wml_actions.color_adjust { red = mathx.round(red * 0.33), green = mathx.round(green * 0.33), blue = mathx.round(blue * 0.33) }
		wml_actions.color_adjust { red = 0, green = 0, blue = 0 }
	end

	function wml_actions.flash(cfg)
		local color = cfg.color or helper.wml_error("Missing required color= attribute in [flash].")
		if cfg.sound then
			wml_actions.sound { name = cfg.sound }
		end
		if color == "red" or color == 1 then
			flash_screen( 100, 0, 0 )
		elseif color == "blue" or color == 2 then
			flash_screen( 0, 0, 100 )
		elseif color == "green" or color == 3 then
			flash_screen( 0, 100, 0 )
		elseif color == "purple" or color == 4 then
			flash_screen( 50, 0, 50 )
		elseif color == "black" or color == 5 then
			flash_screen( -50, -50, -50 )
		elseif color == "brown" or color == 6 then
			flash_screen( 95, 65, 0 )
		elseif color == "orange" or color == 7 then
			flash_screen( 100, 100, 0 )
		elseif color == "white" or color == 8 then
			flash_screen( 100, 100, 100 )
		elseif color == "teal" or color == "aqua" or color == 9 then
			flash_screen( 0, 100, 100 )
		elseif color == "magenta" or color == "fuchsia" or color == 0 then
			flash_screen( 100, 0, 100 )
		else
			helper.wml_error("Unsupported color in [flash].")
		end
	end >>
[/lua]

[event]
    name=side turn

    {RANDOM 1..4}

    [flash]
        color=0
        sound=magic-holy-$random|.ogg
    [/flash]

    [message]
        speaker=narrator
        caption= _ "Rotating War"
        image="portraits/humans/mage-silver+female.png~FL()~RIGHT()"
        message= _ "
Use the castle rotation to carry out complex strategies, and attempt to control the most of the map."+"
<span color='black'>-</span>"+"
If you have trouble understanding the scenario, I'd suggest you dry-run it with a few ai first, just to get the feel of the game."+"
<span color='black'>-</span>"+"
Using fog could also be funny and provide for an interesting gameplay."
    [/message]

    [store_side]
        [has_unit]
            canrecruit=yes
        [/has_unit]
        variable=stored_side
    [/store_side]
[/event]

[event]
    name=die
    first_time_only=no

    [filter]
        canrecruit=yes
    [/filter]

    [chat]
        speaker= _ "Rotating War" # wmllint: ignore
        message= _ "$unit.name, leader of side $unit.side, has been lost."
    [/chat]

    {RANDOM 1..8}
    {LOOKUP_INDEX stored_side side $unit.side side_i}

    [flash]
        color=$stored_side[$side_i].color
        sound=horn-signals/horn-$random|.ogg
    [/flash]

    [modify_side]
        side=$unit.side
        user_team_name= _ "Defeated"
    [/modify_side]

    [kill]
        side=$unit.side
        canrecruit=no
        animate=no
    [/kill]

    [if]
        {VARIABLE_CONDITIONAL stored_side[$global.next_rotation].side equals $unit.side}
        [then]
            {VARIABLE_OP global.next_rotation add 1}
            [if]
                {VARIABLE_CONDITIONAL global.next_rotation equals $stored_side.length}
                [then]
                    {VARIABLE global.next_rotation -1}
                [/then]
            [/if]
        [/then]
    [/if]
    {CLEAR_VARIABLE random,stored_side[$side_i],side_i}
[/event]

[event]
    name=new turn
    first_time_only=no
    [filter_condition]
        {VARIABLE_CONDITIONAL turn_number not_equals 1}
    [/filter_condition]
    {VARIABLE_OP global.next_rotation add 1}
[/event]

[event]
    name=side turn
    first_time_only=no

    [filter_condition]
        {VARIABLE_CONDITIONAL turn_number not_equals 1}
    [/filter_condition]

    [if]
        {VARIABLE_CONDITIONAL global.next_rotation greater_than_equal_to $stored_side.length}
        [then]
            {VARIABLE global.next_rotation -1}
        [/then]
        [else]
            [fire_event]
                name=rotation
            [/fire_event]
        [/else]
    [/if]
[/event]

[event]
    name=rotation
    first_time_only=no

    [filter_condition]
        {VARIABLE_CONDITIONAL side_number equals $stored_side[$global.next_rotation].side}
    [/filter_condition]

    [flash]
        color=$stored_side[$global.next_rotation].side
        sound=lightning.ogg
    [/flash]

    {VARIABLE i_temp 0}
    [while]
        {VARIABLE_CONDITIONAL i_temp less_than $global.GamePos.MA.length}
        [do]
            {VARIABLE j_temp 0}
            [while]
                {VARIABLE_CONDITIONAL j_temp less_than $global.GamePos.MA[$i_temp].MT.length}
                [do]
                    {VARIABLE _next_index $j_temp}
                    {VARIABLE_OP _next_index add 1}

                    [if]
                        {VARIABLE_CONDITIONAL _next_index greater_than_equal_to $global.GamePos.MA[$i_temp].MT.length)}
                        [then]
                            {VARIABLE _next_index 0}
                        [/then]
                    [/if]

                    [set_variables]
                        name=_old_area
                        [split]
                            list=$global.GamePos.MA[$i_temp].MT[$j_temp].x
                            separator=,
                            key=x
                        [/split]
                    [/set_variables]
                    [set_variables]
                        name=_old_area
                        mode=merge
                        [split]
                            list=$global.GamePos.MA[$i_temp].MT[$j_temp].y
                            separator=,
                            key=y
                        [/split]
                    [/set_variables]

                    [set_variables]
                        name=_new_area
                        [split]
                            list=$global.GamePos.MA[$i_temp].MT[$_next_index].x
                            separator=,
                            key=x
                        [/split]
                    [/set_variables]
                    [set_variables]
                        name=_new_area
                        mode=merge
                        [split]
                            list=$global.GamePos.MA[$i_temp].MT[$_next_index].y
                            separator=,
                            key=y
                        [/split]
                    [/set_variables]

                    {VARIABLE k_temp 0}
                    [while]
                        {VARIABLE_CONDITIONAL k_temp less_than $_new_area.length}
                        [do]
                            [store_locations]
                                x,y=$_old_area[$k_temp].x,$_old_area[$k_temp].y
                                variable=_old_hex
                            [/store_locations]

                            [if]
                                [not]
                                    [have_location]
                                        x,y=$_old_area[$k_temp].x,$_old_area[$k_temp].y
                                        terrain="*^Bw*"
                                    [/have_location]
                                [/not]
                                [then]
                                    [set_variables]
                                        name=VoTA_stored_terrain
                                        mode=append
                                        [value]
                                            x,y=$_new_area[$k_temp].x,$_new_area[$k_temp].y
                                            terrain=$_old_hex.terrain
                                        [/value]
                                    [/set_variables]
                                [/then]
                            [/if]

                            [if]
                                [have_location]
                                    x,y=$_old_area[$k_temp].x,$_old_area[$k_temp].y
                                    terrain="*^V*"
                                [/have_location]
                                [then]
                                    [set_variables]
                                        name=VoTA_stored_village
                                        mode=append
                                        [value]
                                            x,y=$_new_area[$k_temp].x,$_new_area[$k_temp].y
                                            side=$_old_hex.owner_side
                                        [/value]
                                    [/set_variables]
                                [/then]
                            [/if]

                            [if]
                                [have_unit]
                                    x,y=$_old_area[$k_temp].x,$_old_area[$k_temp].y
                                [/have_unit]
                                [then]
                                    [store_unit]
                                        [filter]
                                            x,y=$_old_area[$k_temp].x,$_old_area[$k_temp].y
                                        [/filter]
                                        variable=VoTA_stored_units
                                        mode=append
                                        # kill=yes # the game 'forgets' villages owner if so
                                    [/store_unit]

                                    {VARIABLE VoTA_stored_units["$($VoTA_stored_units.length-1)"].x $_new_area[$k_temp].x}
                                    {VARIABLE VoTA_stored_units["$($VoTA_stored_units.length-1)"].y $_new_area[$k_temp].y}
                                [/then]
                            [/if]
                            {CLEAR_VARIABLE _old_hex}
                            {VARIABLE_OP k_temp add 1}
                        [/do]
                    [/while]
                    {CLEAR_VARIABLE _next_index,_old_area,_new_area,k_temp}

                    {VARIABLE_OP j_temp add 1}
                [/do]
            [/while]

            {VARIABLE_OP i_temp add 1}
        [/do]
    [/while]

    {QUAKE rumble.ogg}

    # make all villages neutral
    [capture_village]
        {EVERYWHERE}
        side=0
    [/capture_village]

    # remove everybody
    [kill]
        {EVERYWHERE}
        fire_event=no
        animate=no
    [/kill]

    [redraw]
    [/redraw]

    # redo terrain, units and villages
    [insert_tag]
        name=terrain
        variable=VoTA_stored_terrain
    [/insert_tag]

    [sound]
        name=claws.ogg
    [/sound]

    [foreach]
        array=VoTA_stored_units
        [do]
            [unstore_unit]
                variable=VoTA_stored_units[$i]
            [/unstore_unit]
        [/do]
    [/foreach]

    [insert_tag]
        name=capture_village
        variable=VoTA_stored_village
    [/insert_tag]

    [redraw]
        clear_shroud=yes
    [/redraw]

    {CLEAR_VARIABLE VoTA_stored_units,VoTA_stored_terrain,VoTA_stored_village,i_temp,j_temp}
[/event]
